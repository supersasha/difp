#include "color.h"

#include <math.h>

const int SPECTRUM_SIZE = 65;

Color operator*(const Color& c, float f)
{
    return Color(c.c[0] * f, c.c[1] * f, c.c[2] * f);
}

Color operator*(float f, const Color& c)
{
    return c * f;
}

Color operator+(const Color& c1, const Color& c2)
{
    return Color(c1.c[0] + c2.c[0],
                 c1.c[1] + c2.c[1],
                 c1.c[2] + c2.c[2]);
}

Color operator-(const Color& c1, const Color& c2)
{
    return c1 + (-c2);
}

Color operator-(const Color& c)
{
    return Color(-c.c[0], -c.c[1], -c.c[2]);
}

const float A1931_78[65][3] = {
    {2.689900e-003,2.000000e-004,1.226000e-002},
    {5.310500e-003,3.955600e-004,2.422200e-002},
    {1.078100e-002,8.000000e-004,4.925000e-002},
    {2.079200e-002,1.545700e-003,9.513500e-002},
    {3.798100e-002,2.800000e-003,1.740900e-001},
    {6.315700e-002,4.656200e-003,2.901300e-001},
    {9.994100e-002,7.400000e-003,4.605300e-001},
    {1.582400e-001,1.177900e-002,7.316600e-001},
    {2.294800e-001,1.750000e-002,1.065800e+000},
    {2.810800e-001,2.267800e-002,1.314600e+000},
    {3.109500e-001,2.730000e-002,1.467200e+000},
    {3.307200e-001,3.258400e-002,1.579600e+000},
    {3.333600e-001,3.790000e-002,1.616600e+000},
    {3.167200e-001,4.239100e-002,1.568200e+000},
    {2.888200e-001,4.680000e-002,1.471700e+000},
    {2.596900e-001,5.212200e-002,1.374000e+000},
    {2.327600e-001,6.000000e-002,1.291700e+000},
    {2.099900e-001,7.294200e-002,1.235600e+000},
    {1.747600e-001,9.098000e-002,1.113800e+000},
    {1.328700e-001,1.128400e-001,9.422000e-001},
    {9.194400e-002,1.390200e-001,7.559600e-001},
    {5.698500e-002,1.698700e-001,5.864000e-001},
    {3.173100e-002,2.080200e-001,4.466900e-001},
    {1.461300e-002,2.580800e-001,3.411600e-001},
    {4.849100e-003,3.230000e-001,2.643700e-001},
    {2.321500e-003,4.054000e-001,2.059400e-001},
    {9.289900e-003,5.030000e-001,1.544500e-001},
    {2.927800e-002,6.081100e-001,1.091800e-001},
    {6.379100e-002,7.100000e-001,7.658500e-002},
    {1.108100e-001,7.951000e-001,5.622700e-002},
    {1.669200e-001,8.620000e-001,4.136600e-002},
    {2.276800e-001,9.150500e-001,2.935300e-002},
    {2.926900e-001,9.540000e-001,2.004200e-002},
    {3.622500e-001,9.800400e-001,1.331200e-002},
    {4.363500e-001,9.949500e-001,8.782300e-003},
    {5.151300e-001,1.000100e+000,5.857300e-003},
    {5.974800e-001,9.950000e-001,4.049300e-003},
    {6.812100e-001,9.787500e-001,2.921700e-003},
    {7.642500e-001,9.520000e-001,2.277100e-003},
    {8.439400e-001,9.155800e-001,1.970600e-003},
    {9.163500e-001,8.700000e-001,1.806600e-003},
    {9.770300e-001,8.162300e-001,1.544900e-003},
    {1.023000e+000,7.570000e-001,1.234800e-003},
    {1.051300e+000,6.948300e-001,1.117700e-003},
    {1.055000e+000,6.310000e-001,9.056400e-004},
    {1.036200e+000,5.665400e-001,6.946700e-004},
    {9.923900e-001,5.030000e-001,4.288500e-004},
    {9.286100e-001,4.417200e-001,3.181700e-004},
    {8.434600e-001,3.810000e-001,2.559800e-004},
    {7.398300e-001,3.205200e-001,1.567900e-004},
    {6.328900e-001,2.650000e-001,9.769400e-005},
    {5.335100e-001,2.170200e-001,6.894400e-005},
    {4.406200e-001,1.750000e-001,5.116500e-005},
    {3.545300e-001,1.381200e-001,3.601600e-005},
    {2.786200e-001,1.070000e-001,2.423800e-005},
    {2.148500e-001,8.165200e-002,1.691500e-005},
    {1.616100e-001,6.100000e-002,1.190600e-005},
    {1.182000e-001,4.432700e-002,8.148900e-006},
    {8.575300e-002,3.200000e-002,5.600600e-006},
    {6.307700e-002,2.345400e-002,3.954400e-006},
    {4.583400e-002,1.700000e-002,2.791200e-006},
    {3.205700e-002,1.187200e-002,1.917600e-006},
    {2.218700e-002,8.210000e-003,1.313500e-006},
    {1.561200e-002,5.772300e-003,9.151900e-007},
    {1.109800e-002,4.102000e-003,6.476700e-007},
};

Color spectrum_to_xyz(const float * spectrum)
{
    Color xyz(0, 0, 0);
    for (int i = 0; i < SPECTRUM_SIZE; i++) {
        xyz.c[0] += spectrum[i] * A1931_78[i][0];
        xyz.c[1] += spectrum[i] * A1931_78[i][1];
        xyz.c[2] += spectrum[i] * A1931_78[i][2];
    }
    return xyz;
}

Color xyz_to_srgb(const Color& c)
{
    float x = c.c[0] / 100.0f;
    float y = c.c[1] / 100.0f;
    float z = c.c[2] / 100.0f;

    float r = x *  3.2406f + y * -1.5372f + z * -0.4986f;
    float g = x * -0.9689f + y *  1.8758f + z *  0.0415f;
    float b = x *  0.0557f + y * -0.2040f + z *  1.0570f;

    if(r > 0.0031308f)
        r = 1.055f * pow(r, 1.0f / 2.4f) - 0.055f;
    else
        r = 12.92f * r;

    if(g > 0.0031308f)
        g = 1.055f * pow(g, 1.0f / 2.4f) - 0.055f;
    else
        g = 12.92f * g;

    if(b > 0.0031308f)
        b = 1.055f * pow(b, 1.0f / 2.4f) - 0.055f;
    else
        b = 12.92f * b;
    
    if(r < 0.0f)
        r = 0.0f;
    else if(r > 1.0f)
        r = 1.0f;

    if(g < 0.0f)
        g = 0.0f;
    else if(g > 1.0f)
        g = 1.0f;

    if(b < 0.0f)
        b = 0.0f;
    else if(b > 1.0f)
        b = 1.0f;
    return Color(r, g, b);
}
